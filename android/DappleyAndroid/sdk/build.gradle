apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'
// binary plugins
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def RELEASE_GROUPID = "com.dappley"
def RELEASE_ARTIFACTID = "android-sdk"
def RELEASE_VERSION = "0.2-alpha"
def SITE_URL = "https://github.com/dappley/dappley-java"

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}
android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // set multiDexEnabled true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 源码设置
    sourceSets {
        main {
            // proto文件位置
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
            java {
                srcDir 'src/main/java'
            }
        }
    }

//    packagingOptions {
//        exclude 'lib/x86_64/darwin/libscrypt.dylib'
//        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
//        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
//        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
//        exclude 'org/bitcoinj/crypto/cacerts'
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
//    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
//    implementation 'org.bouncycastle:bcpg-jdk15on:1.60'
//    implementation 'org.bouncycastle:bcprov-ext-jdk15on:1.60'
    implementation 'commons-codec:commons-codec:1.11'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-collections4:4.2'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0'
    implementation 'com.madgag.spongycastle:bcpg-jdk15on:1.58.0.0'
//    implementation 'org.web3j:core:3.3.1-android'
    implementation 'org.web3j:crypto:3.5.0'
//    implementation 'org.bitcoinj:bitcoinj-core:0.14.7'
    implementation 'io.grpc:grpc-stub:1.15.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.15.1'
    implementation 'io.grpc:grpc-okhttp:1.15.1'
//    implementation 'com.google.protobuf:protobuf-java:3.5.1'
    api 'com.google.protobuf:protobuf-lite:3.0.1'
    api 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.snappydb:snappydb-lib:0.5.2'
    implementation 'com.esotericsoftware.kryo:kryo:2.24.0'
    implementation 'com.tencent:mmkv:1.0.11'
    implementation 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }

    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc { // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/src/generated"
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'dappley-android-sdk'
                groupId RELEASE_GROUPID
                artifactId RELEASE_ARTIFACTID
                version RELEASE_VERSION
                url SITE_URL
                licenses {
                    license {
                        name 'GNU Lesser General Public License v3.0'
                        url 'http://www.gnu.org/licenses/lgpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id 'Dappley'
                        name 'Dappley'
                    }
                }
                scm {
                    connection SITE_URL
                    developerConnection SITE_URL
                    url SITE_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = readPropertyFromLocalProperties("bintray.user")
    key = readPropertyFromLocalProperties("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "dappley-java"
        name = "dappley-android-sdk"
        websiteUrl = SITE_URL
        vcsUrl = SITE_URL
        licenses = ["LGPL-3.0"]
        publish = true
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/8/docs/api"
    }
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}
syntax = "proto3";
package rpcpb;
import "peerlist.proto";
import "block.proto";
import "transaction.proto";

option java_package = "com.dappley.android.sdk.protobuf";
option java_outer_classname = "RpcProto";
//option objc_class_prefix = "HLW";

service RpcService {
    rpc RpcGetVersion (GetVersionRequest) returns (GetVersionResponse) {}
    rpc RpcGetBalance (GetBalanceRequest) returns (GetBalanceResponse) {}
    rpc RpcGetBlockchainInfo (GetBlockchainInfoRequest) returns (GetBlockchainInfoResponse) {}
    rpc RpcGetUTXO(GetUTXORequest) returns (GetUTXOResponse) {}
    rpc RpcGetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {}
    rpc RpcGetBlockByHash(GetBlockByHashRequest) returns (GetBlockByHashResponse) {}
    rpc RpcGetBlockByHeight(GetBlockByHeightRequest) returns (GetBlockByHeightResponse) {}
    rpc RpcSendTransaction(SendTransactionRequest) returns (SendTransactionResponse) {}
    rpc RpcGetNewTransactions(GetNewTransactionsRequest) returns (stream GetNewTransactionsResponse) {}
}

service AdminService{
    rpc RpcAddPeer(AddPeerRequest) returns (AddPeerResponse) {}
    rpc RpcSend (SendRequest) returns (SendResponse) {}
    rpc RpcGetPeerInfo (GetPeerInfoRequest) returns (GetPeerInfoResponse) {}
    rpc RpcSendFromMiner (SendFromMinerRequest) returns (SendFromMinerResponse) {}
    rpc RpcAddProducer (AddProducerRequest) returns (AddProducerResponse) {}
    rpc RpcUnlockWallet (UnlockWalletRequest) returns (UnlockWalletResponse) {}
}

// The request message
message CreateWalletRequest {
    string name = 1;
    string passphrase = 2;
}

message UnlockWalletRequest {
    string name = 1;
}

message UnlockWalletResponse {
    string message = 1;
}

message AddProducerRequest {
    string name = 1;
    string address = 2;
}

message GetBalanceRequest {
    string name = 1;
    string passphrase = 2;
    string address = 3;
}

message SendFromMinerRequest {
    string to = 1;
    bytes amount = 2;
}

message SendRequest {
    string from = 1;
    string to = 2;
    bytes amount = 3;
    string Walletpath = 4;
    uint64 tip = 5;
    string contract = 6;
}

message GetWalletAddressRequest {
    string name = 1;
    string passphrase = 2;
}

message GetPeerInfoRequest {}

message GetBlockchainInfoRequest {}

message AddPeerRequest {
    string fullAddress = 1;
}

// The response message

message AddProducerResponse {
    string message = 1;
}

message GetBalanceResponse {
    string message = 1;
    int64 amount = 2;
}

message SendFromMinerResponse {
    string message = 1;
}

message SendResponse {
    string message = 1;
}

message GetPeerInfoResponse {
    networkpb.Peerlist peerList = 1;
}

message GetBlockchainInfoResponse {
    bytes   tailBlockHash = 1;
    uint64  blockHeight = 2;
    repeated string producers = 3; // all producers' addresses
    int64   timestamp = 4;
}

message AddPeerResponse {
    string status = 1;
}

message GetVersionRequest {
    string protoVersion = 1;
}

message GetVersionResponse {
    uint32 errorCode = 1;
    string protoVersion = 2;
    string serverVersion = 3;
}

message GetUTXORequest {
    string address = 1;  //wallet address
}

message GetUTXOResponse {
    uint32 errorCode = 1;
    repeated UTXO utxos = 2;
    repeated corepb.BlockHeader blockHeaders = 3; //The latest block headers
}

message UTXO {
    bytes   amount = 1;
    bytes   publicKeyHash = 2;
    bytes   txid = 3;
    uint32  txIndex = 4;
}

message GetBlocksRequest {
    repeated bytes startBlockHashes = 1;  // Query start block hashes, sorted descending by height.
    int32 maxCount = 2;   // Max query block count
}

message GetBlocksResponse {
    uint32 errorCode = 1;
    repeated corepb.Block blocks = 2;
}

message GetBlockByHashRequest {
    bytes  hash = 1;
}

message GetBlockByHashResponse {
    uint32 errorCode = 1;
    corepb.Block block = 2;
}

message GetBlockByHeightRequest {
    uint64 height = 1;
}

message GetBlockByHeightResponse {
    uint32 errorCode = 1;
    corepb.Block block = 2;
}

message SendTransactionRequest {
    corepb.Transaction transaction = 1;
}

message SendTransactionResponse {
    uint32 errorCode = 1;
}

message GetNewTransactionsRequest {
}

message GetNewTransactionsResponse {
    corepb.Transaction transaction = 1;
}